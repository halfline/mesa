From 216d8a78075e59148d0d066c48aca8e70f5f5609 Mon Sep 17 00:00:00 2001
From: Dave Airlie <airlied@redhat.com>
Date: Wed, 27 Aug 2014 15:46:24 +1000
Subject: [PATCH] Revert "radeonsi/compute: Stop leaking the input buffer"

This reverts commit 70c7ebe5fe1f0f9a49e183857bb8f9d6497ddd7e.
---
 src/gallium/drivers/radeonsi/si_compute.c | 23 ++++++++---------------
 1 file changed, 8 insertions(+), 15 deletions(-)

diff --git a/src/gallium/drivers/radeonsi/si_compute.c b/src/gallium/drivers/radeonsi/si_compute.c
index d99b188..b6aa044 100644
--- a/src/gallium/drivers/radeonsi/si_compute.c
+++ b/src/gallium/drivers/radeonsi/si_compute.c
@@ -43,7 +43,6 @@ struct si_pipe_compute {
 	struct si_pipe_shader *kernels;
 	unsigned num_user_sgprs;
 
-	struct r600_resource *input_buffer;
 	struct pipe_resource *global_buffers[MAX_GLOBAL_BUFFERS];
 
 	LLVMContextRef llvm_ctx;
@@ -81,9 +80,6 @@ static void *si_create_compute_state(
 		LLVMDisposeModule(mod);
 	}
 
-	program->input_buffer =	si_resource_create_custom(sctx->b.b.screen,
-		PIPE_USAGE_IMMUTABLE, program->input_size);
-
 	return program;
 }
 
@@ -129,7 +125,7 @@ static void si_launch_grid(
 	struct si_context *sctx = (struct si_context*)ctx;
 	struct si_pipe_compute *program = sctx->cs_shader_state.program;
 	struct si_pm4_state *pm4 = CALLOC_STRUCT(si_pm4_state);
-	struct r600_resource *input_buffer = program->input_buffer;
+	struct r600_resource *kernel_args_buffer = NULL;
 	unsigned kernel_args_size;
 	unsigned num_work_size_bytes = 36;
 	uint32_t kernel_args_offset = 0;
@@ -158,9 +154,7 @@ static void si_launch_grid(
 
 	/* The extra num_work_size_bytes are for work group / work item size information */
 	kernel_args_size = program->input_size + num_work_size_bytes;
-
-	kernel_args = sctx->b.ws->buffer_map(input_buffer->cs_buf,
-			sctx->b.rings.gfx.cs, PIPE_TRANSFER_WRITE);
+	kernel_args = MALLOC(kernel_args_size);
 	for (i = 0; i < 3; i++) {
 		kernel_args[i] = grid_layout[i];
 		kernel_args[i + 3] = grid_layout[i] * block_layout[i];
@@ -169,13 +163,13 @@ static void si_launch_grid(
 
 	memcpy(kernel_args + (num_work_size_bytes / 4), input, program->input_size);
 
-	sctx->b.ws->buffer_unmap(input_buffer->cs_buf);
-
-	kernel_args_va = input_buffer->gpu_address;
+	si_upload_const_buffer(sctx, &kernel_args_buffer, (uint8_t*)kernel_args,
+					kernel_args_size, &kernel_args_offset);
+	kernel_args_va = r600_resource_va(ctx->screen,
+				(struct pipe_resource*)kernel_args_buffer);
 	kernel_args_va += kernel_args_offset;
 
-	si_pm4_add_bo(pm4, input_buffer, RADEON_USAGE_READ,
-		RADEON_PRIO_SHADER_DATA);
+	si_pm4_add_bo(pm4, kernel_args_buffer, RADEON_USAGE_READ, RADEON_PRIO_SHADER_DATA);
 
 	si_pm4_set_reg(pm4, R_00B900_COMPUTE_USER_DATA_0, kernel_args_va);
 	si_pm4_set_reg(pm4, R_00B900_COMPUTE_USER_DATA_0 + 4, S_008F04_BASE_ADDRESS_HI (kernel_args_va >> 32) | S_008F04_STRIDE(0));
@@ -294,6 +288,7 @@ static void si_launch_grid(
 	}
 #endif
 
+	FREE(kernel_args);
 	si_pm4_free_state(sctx, pm4, ~0);
 }
 
@@ -317,8 +312,6 @@ static void si_delete_compute_state(struct pipe_context *ctx, void* state){
 	if (program->llvm_ctx){
 		LLVMContextDispose(program->llvm_ctx);
 	}
-	pipe_resource_reference(
-		(struct pipe_resource **)&program->input_buffer, NULL);
 
 	//And then free the program itself.
 	FREE(program);
-- 
1.9.3

